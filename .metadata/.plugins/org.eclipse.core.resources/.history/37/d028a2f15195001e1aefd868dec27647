package operations;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import connexion_DB.ConnexionDB;

/**
 * Servlet implementation class EmpruntServlet
 */
public class EmpruntServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public EmpruntServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();

        // Récupérer les détails de l'emprunt depuis le formulaire
        String emailUtilisateur = request.getParameter("emailUtilisateur");
        String titreLivre = request.getParameter("livre");
        String datePrise = request.getParameter("datePrise");
        String dateRetour = request.getParameter("dateRetour");

        // Effectuer le processus d'emprunt et mettre à jour la base de données
        Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = ConnexionDB.obtenirConnexion();

            // Vérifier si le livre est disponible
            if (estLivreDisponible(titreLivre, connexion)) {
                // Mettre à jour la base de données pour marquer le livre comme emprunté
                String updateRequete = "UPDATE Livres SET exemplaires_disponibles = exemplaires_disponibles - 1 WHERE titre = ?";
                preparedStatement = connexion.prepareStatement(updateRequete);
                preparedStatement.setString(1, titreLivre);
                preparedStatement.executeUpdate();

                // Enregistrer les détails de l'emprunt dans la base de données (table Emprunts par exemple)
                String insertRequete = "INSERT INTO Emprunts (email_utilisateur, titre_livre, date_emprunt, date_retour) VALUES (?, ?, ?, ?)";
                preparedStatement = connexion.prepareStatement(insertRequete);
                preparedStatement.setString(1, emailUtilisateur);
                preparedStatement.setString(2, titreLivre);
                preparedStatement.setString(3, datePrise);
                preparedStatement.setString(4, dateRetour);
                preparedStatement.executeUpdate();

                // Informer l'utilisateur que l'emprunt a réussi
                out.println("<p style='color: green;'>Emprunt réussi. Veuillez noter les dates d'emprunt et de retour.</p>");
            } else {
                // Informer l'utilisateur que le livre n'est pas disponible
                out.println("<p style='color: red;'>Le livre n'est pas disponible pour l'emprunt.</p>");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Gérer l'erreur (redirection vers une page d'erreur, etc.)
            out.println("<p style='color: red;'>Erreur lors du processus d'emprunt.</p>");
        } finally {
            fermerRessources(preparedStatement, connexion);
        }

        out.close();
    }

    private boolean estLivreDisponible(String titreLivre, Connection connexion) throws SQLException {
        // Vérifier si le livre est disponible en fonction du nombre d'exemplaires disponibles
        String requete = "SELECT exemplaires_disponibles FROM Livres WHERE titre = ?";
        try (PreparedStatement preparedStatement = connexion.prepareStatement(requete)) {
            preparedStatement.setString(1, titreLivre);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next() && resultSet.getInt("exemplaires_disponibles") > 0;
            }
        }
    }

    private void fermerRessources(PreparedStatement preparedStatement, Connection connexion) {
        try {
            if (preparedStatement != null) {
                preparedStatement.close();
            }
           /* if (connexion != null) {
                ConnexionDB.fermerConnexion();
            }*/
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}
